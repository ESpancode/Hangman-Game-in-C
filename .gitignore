#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <memory.h>
#include <ctype.h>

char *hangman [12] = {
	"------------------------/n",

"|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n------------------------\n",

"_____________________\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n|\n------------------------\n",

"_____________________\n|                   |\n|                   |\n|          |\n|\n|\n|\n|\n|\n|\n|\n|\n------------------------\n",

"_____________________\n|                   |\n|                   |\n|                  O|\n|\n|\n|\n|\n|\n|\n------------------------\n",

"_____________________\n|                   |\n|                   |\n|                   O\n|\n|\n|\n|\n|\n|\n|\n|\n------------------------\n",

"_____________________\n|                   |\n|                   |\n|                    O\n|\n/|\n|\n|\n|\n|\n|\n|\n------------------------\n",

"_____________________\n|                   |\n|                   |\n|                      O\n|\n/|\\n|\n|\n|\n|\n|\n|\n------------------------\n",

"_____________________\n|                   |\n|                   |\n|                        O\n|\n/|\\n|/\n|\n|\n|\n|\n|\n------------------------\n",

"_____________________\n|                   |\n|                   |\n|                          O\n|\n/|\\n|/ \\n|\n|\n|\n|\n|\n------------------------\n"


};



// List of words, which are Star Trek Related read from file!!!
char *list[20]; /*{"kirk", "picard", "sisko", "janeway", "archer",						
				"engineer", "medical", "helm", "communications", "navigation",
				"ensign", "officer", "captain", "doctor", "admiral",
				"human", "borg", "klingon", "romulam", "vulcan"};*/

int main()
{
	FILE * dFile;
	char string [20];
	int i=0;
	int usedletters[26];						// pointing the number of letters needed for word
	char dashes [30];							// hold dashes & guess
	int n;										// holds index to random word
	int len;							// holds length of word
	int wrongNum;						// number of guesses wrong
	char c;								// holds input character
	int word=0;							//number of words in file
	int found;							// says if letter found
	
	dFile = fopen ("D:\\Users\\Sukhraj Sumal\\University\\Programming\\Programming Project\\hangman character list.txt", "r");
	if (dFile == NULL) 
	{
		printf("Cannot open file");
		return;
	}
	else
	{
	




	
			while (fgets (string , sizeof(string), dFile) !=NULL)
			{
					list [word] = (char*)malloc(strlen(string)+1);
					strcpy(list [word++], string);
					if (word>=20)	// so not more than array
						break;
			}

		fclose (dFile);
	}


	wrongNum = 0;
	n =  rand() %word;				// pick a word index
	len = strlen (list[n]);			// get length of word

	memset (usedletters, 0,sizeof (usedletters));		// clear used letters
	memset (dashes, 0, sizeof (dashes));				// clear dashes
	memset (dashes,  '-', len);							// set to dashes for length of word
	while(1)
	{
		printf ("\n\n%s\n", dashes);
		printf("input letter on screen\n");				// user needs to input letter
		c = getchar ();
		if (isalpha (c) != 0)							// check if alphabetic character
		{
			if (usedletters [tolower(c) - 'a'] != 0) // check if letter already used
			{
				printf ("\nLetter used\n");
				continue;
			}
			usedletters [tolower(c) - 'a'] = 1;
			found = 0;
			for (i=0; i<len; i++)
			{
				if (list [n][i] == c)	// if a letter found
				{
					found = 1;			
					dashes[i]=c;
				}
			}
			if (found == 1)				// if user got a letter
			{
				if (_strcmpi (list [n], dashes) == 0)		// compare case insentive
				{
					printf ("\nYOU WON\n");
					break;
				}
			}
			




else
			{
				// hangman	
				printf (hangman [wrongNum]);
				wrongNum++;
				if (wrongNum ==  12)
				{
					printf ("\nYOU LOST\n");
					break;
				}
			}
		}
	}
	printf ("press a key to exit");
	getchar();
return 0;				// returning value
}
